%--------------------------------------------------------------------------
%  Author:
%    
%    Isaac J. Lee (crunchingnumbers.live)
%    
%  Summary:
%    
%    This routine creates a GUI (graphical user interface). It allows the
%    user to create a 2D truss problem. The routine can be updated to also
%    handle creating a 2D frame problem.
%    
%    The primary outputs of this routine are the information needed for
%    the global assemblies of the stiffness matrix and the external force
%    vector. The students are to provide the assembly and postprocessing
%    routines that tie into this GUI.
%    
%  Instructions:
%    
%    Type the following onto Matlab's command window:
%    
%    demo1_gui_truss_analysis
%    
%--------------------------------------------------------------------------
function demo1_gui_truss_analysis()
    clc;
    clear all;
    close all;
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Declare global variables
    %   
    %   By declaring a variable to be global, we can use it in routines
    %   that sit "outside," without having to pass the variable as an
    %   input to these routines.
    %   
    %   workspaceName, workspaceDirectory
    %   -- Name of the workspace, and the directory under which the
    %      workspace is saved
    %   
    %   handle_gui, handle_plot, handle_prompt
    %   -- Handles (pointers) to the GUI, plot, and prompt window
    %   
    %   nodes, elements, BCs
    %   -- Arrays containing information about the nodes, elements, and
    %      boundary conditions
    %      
    %      The two columns of nodes correspond to,
    %         
    %         [x_coordinate, y_coordinate]
    %         
    %      the four columns of elements,
    %         
    %         [start node index, end node index, Young's modulus,
    %          cross-sectional area]
    %         
    %      and the four columns of boundary conditions,
    %         
    %         [node index, boundary condition type, x-component value,
    %          y-component value]
    %         
    %      Please note, we do not store the information of to which node
    %      a row of the nodes array corresponds, because this program is
    %      written such that the node indices are always consecutive
    %      integers, starting with the number 1. The same goes for the
    %      elements and BCs arrays.
    %      
    %      As a result, we can easily check the number of nodes that we
    %      have by calling Matlab's size routine:
    %         
    %         size(nodes, 1)
    %         
    %      The same goes for the number of elements and that of BCs.
    %      
    %   numNodes, numElements, numBCs
    %   -- The number of nodes, elements, and BCs that we have
    %   
    %   option_displayNodeIndex, option_displayElementIndex,
    %   option_displayBCs, option_displayGridAxes
    %   -- Strings (with a value of 'off' or 'on') indicating whether to
    %      display node indices, etc. on screen
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    global workspaceName workspaceDirectory;
    global handle_gui handle_plot handle_prompt;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Create the handle to the GUI
    %   
    %   We will create a GUI with two sides (they are often called panels).
    %   The left panel will display the nodes, elements, and loads, whereas
    %   the right panel will allow us to add or remove them.
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Set the name and directory of the workspace
    workspaceName = 'untitled';
    workspaceDirectory = '';
    
    % Create the handle
    handle_gui = ...
    figure('Name'             , ['2D Analysis of a Truss - ', workspaceName], ...
           'Units'            , 'normalized', ...
           'Position'         , [0.00 0.00 0.60 0.60], ...
           'Color'            , [0.91 0.91 0.90], ...
           'DockControls'     , 'off', ...
           'InvertHardcopy'   , 'off', ...
           'MenuBar'          , 'none', ...
           'NumberTitle'      , 'off', ...
           'Resize'           , 'on', ...
           'PaperUnits'       , 'points', ...
           'PaperPosition'    , [0 0 800 600], ...
           'PaperPositionMode', 'auto', ...
           'ToolBar'          , 'none');
    
    movegui(handle_gui, 'center');
    
    
    % Create the handle to the plot
    handle_plot.windowLocation = [0.06 0.20 0.45 0.68];
    handle_plot.windowCenter   = [0.06 0.20] + 0.5 * [0.45 0.68];
    
    
    % Create the handle to the prompt window
    handle_prompt = [];
    
    
    % Set the nodes, elements, BCs arrays
    nodes    = [];
    elements = [];
    BCs      = [];
    numNodes    = 0;
    numElements = 0;
    numBCs      = 0;
    
    % Set the options
    option_displayNodeIndex    = 'on';
    option_displayElementIndex = 'off';
    option_displayBCs          = 'on';
    option_displayGridAxes     = 'on';
    
    
    % Display the GUI
    drawGUI();
end


%--------------------------------------------------------------------------
%  This routine refreshes the GUI screen. Call this routine if the user
%  makes a change by adding or removing a node, element, or BC.
%--------------------------------------------------------------------------
function drawGUI()
    global handle_gui handle_plot handle_prompt;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    % Call the GUI handle and clear the screen
    figure(handle_gui);
    clf;
    
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Copyright information (PLEASE DO NOT REMOVE OR CHANGE THIS)
    uicontrol('Parent'             , handle_gui, ...
              'Style'              , 'text', ...
              'String'             , [char(169), '  2016  Isaac J. Lee  (crunchingnumbers.live)'], ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.015 0.005 0.32 0.05], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , [0 0 0], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'HorizontalAlignment', 'left');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Create a menu
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    menu(1) = uimenu(handle_gui, 'Label', 'File');
    menu(2) = uimenu(handle_gui, 'Label', 'Tools');
    menu(3) = uimenu(handle_gui, 'Label', 'Help');
    
    
    %----------------------------------------------------------------------
    %  File
    %----------------------------------------------------------------------
    menu_file(1) = ...
    uimenu(menu(1), 'Label'      , 'New workspace', ...
                    'Accelerator', 'n', ...
                    'Callback'   , @newWorkspace);
    
    menu_file(2) = ...
    uimenu(menu(1), 'Label'      , 'Open workspace', ...
                    'Accelerator', 'o', ...
                    'Callback'   , @openWorkspace);
    
    menu_file(3) = ...
    uimenu(menu(1), 'Label'      , 'Save workspace', ...
                    'Accelerator', 's', ...
                    'Callback'   , @saveWorkspace);
    
    menu_file(4) = ...
    uimenu(menu(1), 'Label'      , 'Export', ...
                    'Separator'  , 'on');
    
    menu_file(5) = ...
    uimenu(menu(1), 'Label'      , 'Close program', ...
                    'Accelerator', 'w', ...
                    'Separator'  , 'on', ...
                    'Callback'   , @closeProgram);
    
    % Submenu items
    uimenu(menu_file(4), 'Label'   , 'Assembly file', ...
                         'Callback', @exportAssemblyFile);
    
    uimenu(menu_file(4), 'Label'   , 'Screenshot', ...
                         'Callback', @exportScreenshot);
    
    
    %----------------------------------------------------------------------
    %  Tools
    %----------------------------------------------------------------------
    menu_tools(1) = ...
    uimenu(menu(2), 'Label'      , 'Analyze structure', ...
                    'Accelerator', 'a', ...
                    'Callback'   , @featureNotAvailableYet);
    
    menu_tools(2) = ...
    uimenu(menu(2), 'Label'      , 'Postprocess', ...
                    'Accelerator', 'p', ...
                    'Callback'   , @featureNotAvailableYet);
    
    menu_tools(3) = ...
    uimenu(menu(2), 'Label'      , 'Display options', ...
                    'Separator'  , 'on');
    
    % Submenu items
    uimenu(menu_tools(3), 'Label'      , 'Node index', ...
                          'Accelerator', '1', ...
                          'Checked'    , option_displayNodeIndex, ...
                          'Callback'   , {@switchOption, 'node_index'});
    
    uimenu(menu_tools(3), 'Label'      , 'Element index', ...
                          'Accelerator', '2', ...
                          'Checked'    , option_displayElementIndex, ...
                          'Callback'   , {@switchOption, 'element_index'});
    
    uimenu(menu_tools(3), 'Label'      , 'Boundary conditions', ...
                          'Accelerator', '3', ...
                          'Checked'    , option_displayBCs, ...
                          'Callback'   , {@switchOption, 'bcs'});
    
    uimenu(menu_tools(3), 'Label'      , 'Grid', ...
                          'Accelerator', '4', ...
                          'Checked'    , option_displayGridAxes, ...
                          'Callback'   , {@switchOption, 'grid_axes'});
    
    
    %----------------------------------------------------------------------
    %  Help
    %----------------------------------------------------------------------
    menu_help(1) = ...
    uimenu(menu(3), 'Label'      , 'Credits', ...
                    'Callback'   , @showCredits);
    
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the left panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    subplot('Position' , handle_plot.windowLocation, ...
            'FontUnits', 'normalized', ...
            'FontSize' , 0.045);
    
    
    % Set the plot range
    if (numNodes == 0)
        xMin = -4;
        xMax = 4;
        yMin = -4;
        yMax = 4;
        
    else
        xMin = nodes(1, 1);
        xMax = nodes(1, 1);
        yMin = nodes(1, 2);
        yMax = nodes(1, 2);
        
        % Although not necessary, we create these arrays, because we will
        % need the nodal coordinates when we draw other objects later
        nodes_x = nodes(:, 1);
        nodes_y = nodes(:, 2);
        
        % Based on the current minimum and maximum x- and y- coordinates,
        % we try to extend the range so that the nodes and their indices
        % can be seen on screen
        nodes_xMin = min(nodes_x);
        nodes_xMax = max(nodes_x);
        nodes_yMin = min(nodes_y);
        nodes_yMax = max(nodes_y);
        
        padding_x = 0.05 * max([xMax - nodes_xMin, ...
                               nodes_xMax - xMin, ...
                               nodes_xMax - nodes_xMin, ...
                               4]);
        
        padding_y = 0.05 * max([yMax - nodes_yMin, ...
                               nodes_yMax - yMin, ...
                               nodes_yMax - nodes_yMin, ...
                               4]);
        
        xMin = min(xMin, floor(nodes_xMin - padding_x));
        xMax = max(xMax,  ceil(nodes_xMax + padding_x));
        yMin = min(yMin, floor(nodes_yMin - padding_y));
        yMax = max(yMax,  ceil(nodes_yMax + padding_y));
    end
    
    % Find how large the plot range is in the x- and y-directions
    plotSize_x = xMax - xMin;
    plotSize_y = yMax - yMin;
    
    
    %----------------------------------------------------------------------
    %  Draw the elements
    %----------------------------------------------------------------------
    if (numElements > 0)
        % Find the coordinates of the nodes that make up each element
        x1 = nodes_x(elements(:, 1))';
        y1 = nodes_y(elements(:, 1))';
        x2 = nodes_x(elements(:, 2))';
        y2 = nodes_y(elements(:, 2))';
        
        plot([x1; x2], [y1; y2], '-', ...
                                 'Color'    , [0.70 0.30 0.30], ...
                                 'LineWidth', 2);
        hold on;
        
        % Display the element indices if requested
        if (strcmp(option_displayElementIndex, 'on'))
            criterion = (abs(x2 - x1) >= abs(y2 - y1));
            
            padding_x = zeros(size(x1));
            padding_y = zeros(size(y1));
            
%           padding_x(criterion)  = 0;
            padding_y(criterion)  = 0.03 * plotSize_y;
            
            padding_x(~criterion) = 0.02 * plotSize_x;
%           padding_y(~criterion) = 0;

            text((x1 + x2)/2 + padding_x, ...
                 (y1 + y2)/2 + padding_y, ...
                 num2cell(1 : numElements), ...
                 'FontUnits' , 'normalized', ...
                 'Color'     , [0.40 0.70 0.20], ...
                 'FontSize'  , 0.050, ...
                 'FontWeight', 'bold');
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Draw the BCs if requested
    %----------------------------------------------------------------------
    if (strcmp(option_displayBCs, 'on'))
        for i = 1 : numBCs
            % Find the coordinates of the node
            x1 = nodes_x(BCs(i, 1));
            y1 = nodes_y(BCs(i, 1));
            
            % Get the boundary condition type
            BCtype = BCs(i, 2);
                    
            % These are the components of a vector that points in the same
            % direction as the BC vector, but with a reasonable length such
            % that the arrow representing the vector can be seen on screen
            Delta_x = BCs(i, 3);
            Delta_y = BCs(i, 4);
            
            % Note, the nodes are colored dark green, while the elements
            % are colored dark red. We encourage the user to associate
            % the displacement BCs with the nodes and the force BCs with
            % the elements by coloring the corresponding arrows light green
            % or light red.
            if (BCtype == 1 || BCtype == 3)
                arrow_x_color = [0.40 0.90 0.60];
            else
                arrow_x_color = [0.95 0.60 0.70];
            end
            
            if (BCtype == 1 || BCtype == 4)
                arrow_y_color = [0.40 0.90 0.60];
            else
                arrow_y_color = [0.95 0.60 0.70];
            end
            
            
            %--------------------------------------------------------------
            %  If both components are zero, just draw a square around
            %  the node
            %--------------------------------------------------------------
            if (Delta_x == 0 && Delta_y == 0)
                rectangle('Position' , [x1 - plotSize_x/64, y1 - plotSize_y/64, plotSize_x/64, plotSize_y/32], ...
                          'EdgeColor', arrow_x_color, ...
                          'FaceColor', arrow_x_color);
                hold on;
                
                rectangle('Position' , [x1                , y1 - plotSize_y/64, plotSize_x/64, plotSize_y/32], ...
                          'EdgeColor', arrow_y_color, ...
                          'FaceColor', arrow_y_color);
                hold on;
                
                
            %--------------------------------------------------------------
            %  For a pure Dirichlet or pure Neumann BC, we draw a single
            %  arrow
            %--------------------------------------------------------------
            elseif (BCtype == 1 || BCtype == 2)
                % Sign change for the arrow head
                if (Delta_x >= 0)
                    arrowhead_sign = 1;
                else
                    arrowhead_sign = -1;
                end
                
                arrow_length = sqrt(Delta_x^2 + Delta_y^2);
                arrow_angle  = arrowhead_sign * atan(Delta_y/abs(Delta_x));
                
                % Find the coordinates of the arrow head
                arrowhead_x = x1 + plotSize_x/18 * (Delta_x/arrow_length);
                arrowhead_y = y1 + plotSize_y/18 * (Delta_y/arrow_length);
                
                % If the arrow is horizontal or vertical, we shift the two
                % ends of the arrow head by a bit
                shift_x = 0;
                shift_y = 0;
                if (Delta_x == 0)
                    shift_x = -plotSize_x/400;
                elseif (Delta_y == 0)
                    shift_y = plotSize_y/400;
                end
                
                % Draw the arrow
                line([x1 arrowhead_x], ...
                     [y1 arrowhead_y], ...
                     'Color'    , arrow_x_color, ...
                     'LineWidth', 3.5);
                hold on;
                
                line(arrowhead_x + shift_x - arrowhead_sign * [0, plotSize_x/36 * cos(arrow_angle + 0.4)], ...
                     arrowhead_y + shift_y - arrowhead_sign * [0, plotSize_y/36 * sin(arrow_angle + 0.4)], ...
                     'Color'    , arrow_x_color, ...
                     'LineWidth', 3);
                hold on;
                
                line(arrowhead_x + shift_x - arrowhead_sign * [0, plotSize_x/36 * cos(arrow_angle - 0.4)], ...
                     arrowhead_y + shift_y - arrowhead_sign * [0, plotSize_y/36 * sin(arrow_angle - 0.4)], ...
                     'Color'    , arrow_x_color, ...
                     'LineWidth', 3);
                hold on;
                
                
            %--------------------------------------------------------------
            %  For a mixed BC, we draw two separate arrows
            %--------------------------------------------------------------
            else
                if (Delta_x == 0)
                    rectangle('Position' , [x1 - plotSize_x/64, y1 - plotSize_y/64, plotSize_x/32, plotSize_y/32], ...
                              'EdgeColor', arrow_x_color, ...
                              'FaceColor', arrow_x_color);
                    hold on;
                    
                else
                    % Sign change for the arrow head
                    arrowhead_sign = sign(Delta_x);
                    
                    % Find the coordinates of the arrow head
                    arrowhead_x = x1 + arrowhead_sign * plotSize_x/18;
                    arrowhead_y = y1;
                    shift_y     = plotSize_y/400;
                    
                    % Draw the arrow (horizontal)
                    line([x1 arrowhead_x], ...
                         [y1 arrowhead_y], ...
                         'Color'    , arrow_x_color, ...
                         'LineWidth', 3.5);
                    hold on;
                    
                    line(arrowhead_x           - arrowhead_sign * [0, plotSize_x/36 * cos(0.4)], ...
                         arrowhead_y + shift_y - arrowhead_sign * [0, plotSize_y/36 * sin(0.4)], ...
                         'Color'    , arrow_x_color, ...
                         'LineWidth', 3);
                    hold on;
                    
                    line(arrowhead_x           - arrowhead_sign * [0, plotSize_x/36 * cos(-0.4)], ...
                         arrowhead_y + shift_y - arrowhead_sign * [0, plotSize_y/36 * sin(-0.4)], ...
                         'Color'    , arrow_x_color, ...
                         'LineWidth', 3);
                    hold on;
                    
                end
                
                if (Delta_y == 0)
                    rectangle('Position' , [x1 - plotSize_x/64, y1 - plotSize_y/64, plotSize_x/32, plotSize_y/32], ...
                              'EdgeColor', arrow_y_color, ...
                              'FaceColor', arrow_y_color);
                    hold on;
                    
                else
                    % Sign change for the arrow head
                    arrowhead_sign = sign(Delta_y);
                    
                    % Find the coordinates of the arrow head
                    arrowhead_x = x1;
                    arrowhead_y = y1 + arrowhead_sign * plotSize_y/18;
                    shift_x     = -plotSize_x/400;
                    
                    % Draw the arrow (vertical)
                    line([x1 arrowhead_x], ...
                         [y1 arrowhead_y], ...
                         'Color'    , arrow_y_color, ...
                         'LineWidth', 3.5);
                    hold on;
                    
                    line(arrowhead_x + shift_x - [0, plotSize_x/36 * cos(arrowhead_sign * pi/2 + 0.4)], ...
                         arrowhead_y           - [0, plotSize_y/36 * sin(arrowhead_sign * pi/2 + 0.4)], ...
                         'Color'    , arrow_y_color, ...
                         'LineWidth', 3);
                    hold on;
                    
                    line(arrowhead_x + shift_x - [0, plotSize_x/36 * cos(arrowhead_sign * pi/2 - 0.4)], ...
                         arrowhead_y           - [0, plotSize_y/36 * sin(arrowhead_sign * pi/2 - 0.4)], ...
                         'Color'    , arrow_y_color, ...
                         'LineWidth', 3);
                    hold on;
                    
                end
            end
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Draw the nodes
    %----------------------------------------------------------------------
    if (numNodes > 0)
        plot(nodes_x, nodes_y, 's', ...
                               'Color'          , [0 0 0], ...
                               'MarkerFaceColor', [0.40 0.80 0.30]);
        hold on;
        
        % Display the node index if requested
        if (strcmp(option_displayNodeIndex, 'on'))
            padding_x = 0.02*plotSize_x;
            padding_y = 0.03*plotSize_y;
            
            text(nodes_x + padding_x, ...
                 nodes_y + padding_y, ...
                 num2cell(1 : numNodes), ...
                 'FontUnits' , 'normalized', ...
                 'Color'     , [0.50 0.40 0.10], ...
                 'FontSize'  , 0.050, ...
                 'FontWeight', 'bold');
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Set plotting parameters
    %----------------------------------------------------------------------
    % Set the title and axis labels
    title('Plot window', ...
          'FontUnits'  , 'normalized', ...
          'FontSize'   , 0.100);
    
    % Label the axes
    xlabel('x');
    ylabel('y   ', 'Rotation', 0);
    
    % Set the plot range
    axis([xMin xMax yMin yMax]);
    axis square;
    
    % Draw the grid if requested
    if (strcmp(option_displayGridAxes, 'on'))
        grid on;
    end
    
    % Create ticks as visual aids
    xTicks = linspace(xMin, xMax, 9);
    yTicks = linspace(yMin, yMax, 9);
    
    set(gca, 'FontUnits' , 'normalized', ...
             'FontSize'  , 0.050, ...
             'XTick'     , xTicks, ...
             'XTickLabel', num2cell(round(xTicks, 1)), ...
             'YTick'     , yTicks, ...
             'YTickLabel', num2cell(round(yTicks, 1)));
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the right panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_rightPanel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.54 0.04 0.41 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    
    %----------------------------------------------------------------------
    %  Nodes section
    %----------------------------------------------------------------------
    % Create the label for nodes
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Nodes:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.92 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.600, ...
              'FontWeight'         , 'bold', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for list of nodes
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Index       Coordinates (x, y)', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.86 0.94 0.05], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the list of nodes
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'listbox', ...
              'String'             , listNodes(), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.755 0.94 0.11], ...
              'BackgroundColor'    , [0.90 0.92 0.90], ...
              'FontSize'           , 0.180);
    
    % Create the add node button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Add', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.69 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @addNode);
    
    % Create the edit node button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.36 0.69 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @editNode);
    
    % Create the remove node button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Remove', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.69 0.69 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @removeNode);
    
    
    %----------------------------------------------------------------------
    %  Elements section
    %----------------------------------------------------------------------
    % Create the label for selements
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Elements:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.585 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.600, ...
              'FontWeight'         , 'bold', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for list of elements
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Index       Node connectivity      Material properties (E, A)', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.525 0.94 0.05], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the list of elements
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'listbox', ...
              'String'             , listElements(), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.420 0.94 0.11], ...
              'BackgroundColor'    , [0.90 0.92 0.90], ...
              'FontSize'           , 0.180);
    
    % Create the add element button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Add', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.355 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @addElement);
    
    % Create the remove element button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Remove', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.36 0.355 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @removeElement);
    
    
    %----------------------------------------------------------------------
    %  Boundary conditions section
    %----------------------------------------------------------------------
    % Create the label for boundary conditions
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Boundary conditions:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.25 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.600, ...
              'FontWeight'         , 'bold', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for list of BCs
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'text', ...
              'String'             , 'Node index    BC type (x, y)        Component values (x, y)', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.19 0.94 0.05], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the list of BCs
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'listbox', ...
              'String'             , listBCs(), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.085 0.94 0.11], ...
              'BackgroundColor'    , [0.90 0.92 0.90], ...
              'FontSize'           , 0.180);
    
    % Create the add element button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Add', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @addBC);
    
    % Create the remove element button
    uicontrol('Parent'             , handle_rightPanel, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'Remove', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @removeBC);
    
    
    % If drawGUI was called from a prompt window, switch back to it
    if (~isempty(handle_prompt))
        figure(handle_prompt);
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to start a new workspace
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function newWorkspace(~, ~)
    global workspaceName workspaceDirectory;
    global handle_gui handle_prompt;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    
    % Set to the default values
    workspaceName      = 'untitled';
    workspaceDirectory = '';
    nodes    = [];
    elements = [];
    BCs      = [];
    numNodes    = 0;
    numElements = 0;
    numBCs      = 0;
    option_displayNodeIndex    = 'on';
    option_displayElementIndex = 'off';
    option_displayBCs          = 'on';
    option_displayGridAxes     = 'on';
    
    % Update the workspace name
    set(handle_gui, 'Name', ['2D Analysis of a Truss - ', workspaceName]);
    
    % Display the GUI
    drawGUI();
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to open a saved workspace
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function openWorkspace(~, ~)
    global workspaceName workspaceDirectory;
    global handle_gui handle_prompt;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    
    %----------------------------------------------------------------------
    %  Create the prompt window for opening a workspace
    %----------------------------------------------------------------------
    [fileName, fileDirectory, fileExtension] = ...
    uigetfile({'*.mat', 'Workspace for ASE 321K (*.mat)'}, ...
              'Please select the workspace file to open');
    
    
    %----------------------------------------------------------------------
    %  Check that the user did not select Cancel and that the file does
    %  contain data
    %----------------------------------------------------------------------
    if (fileExtension > 0 && ~isempty(strcat(fileDirectory, fileName)))
        load(strcat(fileDirectory, fileName), 'nodes', 'elements', 'BCs', 'options');
        
        workspaceName = fileName(1 : (end - 4));
        workspaceDirectory = fileDirectory;
        
        % Update the workspace name
        set(handle_gui, 'Name', ['2D Analysis of a Truss - ', workspaceName]);
        
        % Set the number of nodes, elements, BCs
        numNodes    = size(nodes, 1);
        numElements = size(elements, 1);
        numBCs      = size(BCs, 1);
        
        % Set the options
        option_displayNodeIndex    = options{1};
        option_displayElementIndex = options{2};
        option_displayBCs          = options{3};
        option_displayGridAxes     = options{4};
        
        % If there is a prompt window already, close it
        if (ishandle(handle_prompt))
            close_prompt();
        end
        
        % Display the GUI
        drawGUI();
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to save the current workspace
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function saveWorkspace(~, ~)
    global workspaceName workspaceDirectory;
    global handle_gui;
    global nodes elements BCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    options = {option_displayNodeIndex; ...
               option_displayElementIndex; ...
               option_displayBCs; ...
               option_displayGridAxes};
    
    
    %----------------------------------------------------------------------
    %  Create the prompt window for saving the workspace
    %----------------------------------------------------------------------
    [fileName, fileDirectory, fileExtension] = ...
    uiputfile({'*.mat', 'Workspace for ASE 321K (*.mat)'}, ...
              'Save the workspace as', ...
              workspaceName);
    
    %----------------------------------------------------------------------
    %  Check that the user did not select Cancel and that the file does
    %  contain data
    %----------------------------------------------------------------------
    if (fileExtension > 0)
        save(strcat(fileDirectory, fileName), 'nodes', 'elements', 'BCs', 'options', '-v7.3');
        
        workspaceName      = fileName(1 : (end - 4));
        workspaceDirectory = fileDirectory;
        
        % Update the workspace name
        set(handle_gui, 'Name', ['2D Analysis of a Truss - ', workspaceName]);
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to create the assembly file
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function exportAssemblyFile(~, ~)
    global workspaceName workspaceDirectory;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    
    %----------------------------------------------------------------------
    %  Check that there are at least two nodes and an element
    %----------------------------------------------------------------------
    if (numNodes < 2 || numElements < 1)
        display_error_message('Umm... a structure must have at least two nodes and an element.');
        
        return;
    end
    
    
    %----------------------------------------------------------------------
    %  Check that the nodes and elements form a connected graph
    %----------------------------------------------------------------------
    adjacencyMatrix = eye(numNodes);
    
    for i = 1 : numElements
        % Find the node indices
        index1 = elements(i, 1);
        index2 = elements(i, 2);
        
        % Set the corresponding entries in the adjacency matrix to 1
        adjacencyMatrix(index1, index2) = 1;
        adjacencyMatrix(index2, index1) = 1;
    end
    
    
    % Matlab's dmperm returns 4 vectors: p, q, r, and s
    [~, ~, r, ~] = dmperm(adjacencyMatrix);
    
    
    % By typing in p(r(1):r(2) - 1), p(r(2):r(3) - 1), and so on, we can
    % find the nodes of each disjoint graph. This means, we can use the
    % size of the vector r to determine whether the nodes and elements
    % form a connected graph
    if (length(r) ~= 2)
        display_error_message('Umm... the structure has disjoint members. Please add elements to connect these members.');
        
        return;
    end
    
    
    %----------------------------------------------------------------------
    %  Check the boundary conditions
    %----------------------------------------------------------------------
    % If there are nodes without a BC specified, assume that they are
    % traction-free (i.e. zero force)
    if (numBCs < numNodes)
        % Find the nodes without a BC
        if (numBCs > 0)
            nodesWithoutBCs = setdiff((1 : numNodes)', BCs(:, 1));
        else
            nodesWithoutBCs = (1 : numNodes)';
        end
        
        % Set zero force BC to these nodes
        BCs = [BCs; ...
               [nodesWithoutBCs, ones(numNodes - numBCs, 1) * [2 0 0]]];
        
        % Update the number of BCs
        numBCs = numNodes;
        
        % Sort the BCs in ascending node index
        if (numBCs > 1)
            [~, permutation] = sort(BCs(:, 1));
            
            BCs = BCs(permutation, :);
        end
    end
    
    
    % Initialize the BC arrays
    BCs_displacement = [];
    BCs_force        = [];
    
    for i = 1 : numBCs
        switch BCs(i, 2)
            % Dirichlet (displacement in x and y)
            case 1
                BCs_displacement = [BCs_displacement; ...
                                    BCs(i, 1), 1, BCs(i, 3); ...
                                    BCs(i, 1), 2, BCs(i, 4)];
                
            % Neumann (force in x and y)
            case 2
                BCs_force        = [BCs_force; ...
                                    BCs(i, 1), 1, BCs(i, 3); ...
                                    BCs(i, 1), 2, BCs(i, 4)];
                
            % Mixed 1 (displacement in x, force in y)
            case 3
                BCs_displacement = [BCs_displacement; ...
                                    BCs(i, 1), 1, BCs(i, 3)];
                BCs_force        = [BCs_force; ...
                                    BCs(i, 1), 2, BCs(i, 4)];
                
            % Mixed 2 (force in x, displacement in y)
            case 4
                BCs_force        = [BCs_force; ...
                                    BCs(i, 1), 1, BCs(i, 3)];
                BCs_displacement = [BCs_displacement; ...
                                    BCs(i, 1), 2, BCs(i, 4)];
                
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Group the options as an array
    %----------------------------------------------------------------------
    options = {option_displayNodeIndex;
               option_displayElementIndex;
               option_displayBCs;
               option_displayGridAxes};
    
    
    %----------------------------------------------------------------------
    %  Save to files
    %----------------------------------------------------------------------
    save(strcat(workspaceDirectory, workspaceName, '.mat'), 'nodes', 'elements', 'BCs', 'options', '-v7.3');
    
    save(strcat(workspaceDirectory, workspaceName, '_assembly.mat'), 'nodes', 'elements', 'BCs_displacement', 'BCs_force', '-v7.3');
    
    
    %----------------------------------------------------------------------
    %  Create text files in case the students want to use these in Matlab,
    %  or want to open the files in another program. A whitespace will be
    %  used as the delimiter.
    %----------------------------------------------------------------------
    % Create a text file for nodes
    fileID = fopen(strcat(workspaceDirectory, workspaceName, '_assembly_nodes.txt'), 'w');
    
    fprintf(fileID, '%d\n', numNodes);
    for i = 1 : numNodes
        fprintf(fileID, '%.15f %.15f\n', nodes(i, 1), nodes(i, 2));
    end
    
    fclose(fileID);
    
    
    % Create a text file for elements
    fileID = fopen(strcat(workspaceDirectory, workspaceName, '_assembly_elements.txt'), 'w');
    
    fprintf(fileID, '%d\n', numElements);
    for i = 1 : numElements
        fprintf(fileID, '%d %d %.15f %.15f\n', elements(i, 1), elements(i, 2), elements(i, 3), elements(i, 4));
    end
    
    fclose(fileID);
    
    
    % Create a text file for displacement BCs
    fileID = fopen(strcat(workspaceDirectory, workspaceName, '_assembly_BCs_displacement.txt'), 'w');
    
    fprintf(fileID, '%d\n', size(BCs_displacement, 1));
    for i = 1 : size(BCs_displacement, 1)
        fprintf(fileID, '%d %d %.15f\n', BCs_displacement(i, 1), BCs_displacement(i, 2), BCs_displacement(i, 3));
    end
    
    fclose(fileID);
    
    
    % Create a text file for force BCs
    fileID = fopen(strcat(workspaceDirectory, workspaceName, '_assembly_BCs_force.txt'), 'w');
    
    fprintf(fileID, '%d\n', size(BCs_force, 1));
    for i = 1 : size(BCs_force, 1)
        fprintf(fileID, '%d %d %.15f\n', BCs_force(i, 1), BCs_force(i, 2), BCs_force(i, 3));
    end
    
    fclose(fileID);
    
    
    % Display the GUI
    drawGUI();
    
    display_success_message(sprintf('The assembly file has been created. Please check %s_assembly.mat.', workspaceName));
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to save a screenshot
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function exportScreenshot(~, ~)
    global workspaceName;
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Let the user select where to save the screenshot
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    [fileName, fileDirectory, fileExtension] = ...
    uiputfile({'*.png', 'PNG file'; '*.jpg', 'JPEG file'}, ...
              'Save the screenshot as', ...
              strcat(workspaceName, '_screenshot'));
    
    
    % Check that the user selected Save, not Cancel
    if (fileExtension > 0)
        % Save to file
        switch fileExtension
            case 1
                print('-dpng' , '-r0', strcat(fileDirectory, fileName));
                
            case 2
                print('-djpeg', '-r0', strcat(fileDirectory, fileName));
                
        end
        
        display_success_message('Your screenshot has been created. Enjoy!');
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to close the program
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function closeProgram(~, ~)
    close all;
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to switch an option
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function switchOption(~, ~, option)
    global option_displayNodeIndex option_displayElementIndex option_displayBCs option_displayGridAxes;
    
    switch option
        case 'node_index'
            if (strcmp(option_displayNodeIndex, 'off'))
                option_displayNodeIndex = 'on';
            else
                option_displayNodeIndex = 'off';
            end
            
        case 'element_index'
            if (strcmp(option_displayElementIndex, 'off'))
                option_displayElementIndex = 'on';
            else
                option_displayElementIndex = 'off';
            end
            
        case 'bcs'
            if (strcmp(option_displayBCs, 'off'))
                option_displayBCs = 'on';
            else
                option_displayBCs = 'off';
            end
            
        case 'grid_axes'
            if (strcmp(option_displayGridAxes, 'off'))
                option_displayGridAxes = 'on';
            else
                option_displayGridAxes = 'off';
            end
            
    end
    
    drawGUI();
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to show credits
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function showCredits(~, ~)
    global handle_prompt
    
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    handle_prompt = ...
    figure('Name'        , 'Credits', ...
           'Units'       , 'normalized', ...
           'Position'    , [0.00 0.00 0.26 0.15], ...
           'Color'       , [0.76 0.82 0.73], ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    movegui(handle_prompt, 'center');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'text', ...
              'String'             , sprintf('This GUI has been brought to you by Isaac Lee.\n\nCome visit his blog at crunchingnumbers.live !'), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.06 0.20 0.88 0.64], ...
              'BackgroundColor'    , [0.76 0.82 0.73], ...
              'ForegroundColor'    , [0.14 0.12 0.20], ...
              'FontSize'           , 0.170, ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'OK', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.43 0.06 0.14 0.20], ...
              'FontSize'           , 0.570, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to display the nodes as a list
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function output = listNodes()
    global nodes numNodes;
    
    output = {};
    
    for i = 1 : numNodes
        x = nodes(i, 1);
        y = nodes(i, 2);
        
        numSpaces = max(16 - 2 * floor(log10(i)), 0);
        
        output{i} = sprintf(' %d %s (%.3f, %.3f)', ...
                            i, repmat(' ', [1 numSpaces]), x, y);
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to display the elements as a list
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function output = listElements()
    global elements numElements;
    
    output = {};
    
    for i = 1 : numElements
        index1 = elements(i, 1);
        index2 = elements(i, 2);
        E      = elements(i, 3);
        A      = elements(i, 4);
        
        numSpaces = [max(16 - 2 * floor(log10(i)), 0); ...
                     max(35 - 2 * floor(log10(index1)) - 2 * floor(log10(index2)), 0)];
        
        output{i} = sprintf(' %d %s (%d, %d) %s %5.3f, %5.3f', ...
                            i, repmat(' ', [1 numSpaces(1)]), index1, index2, repmat(' ', [1 numSpaces(2)]), E, A);
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to display the elements as a list
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function output = listBCs()
    global BCs numBCs;
    
    output = {};
    
    for i = 1 : numBCs
        index  = BCs(i, 1);
        BCtype = BCs(i, 2);
        x      = BCs(i, 3);
        y      = BCs(i, 4);
        
        switch BCtype
            case 1
                BCtype_str = 'Displ., Displ.';
                
            case 2
                BCtype_str = 'Force, Force';
                
            case 3
                BCtype_str = 'Displ., Force';
                
            case 4
                BCtype_str = 'Force, Displ.';
                
        end
        
        numSpaces = [max(25 - 2 * floor(log10(i)), 0); ...
                     max(29 - size(BCtype_str, 2), 0)];
        
        output{i} = sprintf(' %d %s %s %s %5.3f, %5.3f', ...
                            index, repmat(' ', [1 numSpaces(1)]), BCtype_str, repmat(' ', [1 numSpaces(2)]), x, y);
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to display the indices as a list
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function output = listIndices(type)
    global BCs;
    global numNodes numElements numBCs;
    
    switch type
        case 'nodes'
            output = num2cell(1 : numNodes);
            
        case 'elements'
            output = num2cell(1 : numElements);
            
        case 'nodesWithBCs'
            output = num2cell(BCs(1 : numBCs, 1));
            
        case 'nodesWithoutBCs'
            if (numBCs > 0)
                output = num2cell(setdiff((1 : numNodes)', BCs(:, 1)));
                
            else
                output = num2cell(1 : numNodes);
                
            end
    end
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine if the GUI feature has not been implemented yet
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function featureNotAvailableYet(~, ~)
    display_error_message('Sorry, this feature is not available yet. Please try it again later.');
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   These routines specify what the prompt window looks like. The prompt
%   is created to the right of the GUI window, so that it is easier to
%   navigate between the two windows. We will specify later what to do
%   when the user presses the ok button.
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function addNode(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To add a node, please provide the following information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for x-coordinate
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'x-coordinate:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for x-coordinate
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the input box for y-coordinate
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'y-coordinate:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.65 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for y-coordinate
    handle_edit(2) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.59 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_addNode);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function editNode(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numNodes;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numNodes == 0)
        display_error_message('Umm... there are no nodes. To edit a node, please add a node first.');
        
        return;
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To edit a node, please provide the following information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for node index
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Index of the node:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodes'), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for x-coordinate
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'x-coordinate:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.65 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for x-coordinate
    handle_edit(2) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.59 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for y-coordinate
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'y-coordinate:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.50 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for y-coordinate
    handle_edit(3) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.44 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_editNode);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function removeNode(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numNodes;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numNodes == 0)
        display_error_message('Umm... there are no nodes. Please add a node first.');
        
        return;
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To remove a node, please enter these information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for node index
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Index of the node:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodes'), ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_removeNode);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function addElement(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numNodes numElements;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numNodes == 0)
        display_error_message('Umm... there are no nodes. To add an element, you need at least two nodes.');
        
        return;
        
    elseif (numNodes == 1)
        display_error_message('Umm... there is only one node. To add an element, you need at least two nodes.');
        
        return;
        
    elseif (numElements == nchoosek(numNodes, 2))
        display_error_message('There are no more elements that you can create. Please add a node or remove an element first.');
        
        return;
        
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To add an element, please enter these information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for node indices
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Indices of the two nodes:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node 1 index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodes'), ...
              'Value'              , 1, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Insert a comma
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , ',', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.38 0.74 0.05 0.05], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node 2 index
    handle_edit(2) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodes'), ...
              'Value'              , 2, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.45 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for Young's modulus
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Young''s modulus (E):', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.65 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for Young's modulus
    handle_edit(3) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.59 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for cross-sectional area
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Cross-sectional area (A):', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.50 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for cross-sectional area
    handle_edit(4) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.44 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_addElement);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function removeElement(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numElements;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numElements == 0)
        display_error_message('Umm... there are no elements. Please add an element first.');
        
        return;
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To remove an element, please enter these information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for element index
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Index of the element:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for element index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('elements'), ...
              'Value'              , 1, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_removeElement);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function addBC(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numNodes numBCs;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numNodes == 0)
        display_error_message('Umm... there are no nodes. To add a BC, please add a node first.');
        
        return;
        
    elseif (numBCs == numNodes)
        display_error_message('All nodes have a BC specified. Please remove a boundary condition first.');
        
        return;
        
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To add a boundary condition, please enter these information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for node index
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Index of the node:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodesWithoutBCs'), ...
              'Value'              , 1, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for boundary condition type
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Type of boundary condition (x, y):', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.65 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for boundary condition type
    handle_edit(2) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , {'Displacement, Displacement'; 'Force, Force'; 'Displacement, Force'; 'Force, Displacement'}, ...
              'Value'              , 1, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.59 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for x-component
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Value of the x-component:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.50 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for x-component
    handle_edit(3) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.44 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the label for y-component
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Value of the y-component:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.35 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the input box for y-component
    handle_edit(4) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'edit', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.29 0.90 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_addBC);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function removeBC(~, ~)
    global handle_gui handle_prompt handle_panel handle_edit;
    global numBCs;
    
    % Set the colors
    backgroundColor = handle_gui.Color;
    foregroundColor = [0.10 0.10 0.10];
    
    % Find the current position of the GUI window
    gui_position = get(handle_gui, 'Position');
    
    
    %----------------------------------------------------------------------
    %  Initialize the prompt window
    %----------------------------------------------------------------------
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    if (numBCs == 0)
        display_error_message('Umm... there are no boundary conditions. Please add a boundary condition first.');
        
        return;
    end
    
    prompt_width = 0.22/0.60 * gui_position(4);
    
    handle_prompt = ...
    figure('Name'        , 'Prompt window', ...
           'Units'       , 'normalized', ...
           'Position'    , [(gui_position(1) + gui_position(3) - prompt_width), gui_position(2), prompt_width, gui_position(4)], ...
           'Color'       , backgroundColor, ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    
    %----------------------------------------------------------------------
    % ---------------------------------------------------------------------
    %   Set the panel
    % ---------------------------------------------------------------------
    %----------------------------------------------------------------------
    % Create a beveled panel for aesthetics
    handle_panel = ...
    uipanel('Title'                , '', ...
            'TitlePosition'        , 'lefttop', ...
            'FontUnits'            , 'normalized', ...
            'Position'             , [0.04 0.04 0.92 0.92], ...
            'BackgroundColor'      , backgroundColor, ...
            'BorderType'           , 'beveledin', ...
            'ForegroundColor'      , [0.00 0.00 0.00], ...
            'FontSize'             , 0.055, ...
            'FontWeight'           , 'bold');
    
    % Create the label for instructions
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'To remove a boundary condition, please enter these information.', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.88 0.94 0.10], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.320, ...
              'FontWeight'         , 'normal', ...
              'HorizontalAlignment', 'left');
    
    % Create the label for node index
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'text', ...
              'String'             , 'Index of the node:', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.03 0.80 0.94 0.06], ...
              'BackgroundColor'    , backgroundColor, ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left');
    
    % Create the popup menu for node index
    handle_edit(1) = ...
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'popupmenu', ...
              'String'             , listIndices('nodesWithBCs'), ...
              'Value'              , 1, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.05 0.74 0.30 0.05], ...
              'BackgroundColor'    , [0.90 0.92 0.95], ...
              'ForegroundColor'    , foregroundColor, ...
              'FontSize'           , 0.500, ...
              'HorizontalAlignment', 'left', ...
              'Enable'             , 'inactive', ...
              'ButtonDownFcn'      , @changeColor);
    
    % Create the ok button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'OK', ..., ...
              'Position'           , [0.03 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @ok_removeBC);
    
    % Create the return button
    uicontrol('Parent'             , handle_panel, ...
              'Style'              , 'pushbutton', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'String'             , 'Return', ...
              'Position'           , [0.36 0.02 0.30 0.045], ...
              'FontSize'           , 0.500, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


%--------------------------------------------------------------------------
% -------------------------------------------------------------------------
%   Call this routine to check the user's input (as much as possible),
%   process the input, and provide a feedback to the user, indicating
%   success or failure.
%   
%   The checks that are common throughout the routines are done by calling
%   the corresponding checkinput routine. The checks that are unique to
%   the routine are specified within.
% -------------------------------------------------------------------------
%--------------------------------------------------------------------------
function ok_addNode(~, ~)
    global handle_panel handle_edit;
    global nodes elements;
    global numNodes numElements;
    
    
    % Get the user's inputs
    x_str = get(handle_edit(1), 'String');
    y_str = get(handle_edit(2), 'String');
    x = str2double(x_str);
    y = str2double(y_str);
    
    
    %----------------------------------------------------------------------
    %  Check the user's input
    %----------------------------------------------------------------------
    error_flag    = 0;
    error_message = '';
    
    % Check the x-coordinate
    [flag, message] = checkinput_isReal('x-coordinate', x_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check if the x-coordinate is too big (this causes a problem with plotting)
    if (error_flag == 0)
        if (abs(x) >= 1e5)
            error_flag    = 1;
            error_message = strcat(error_message, 'Error in the x-coordinate:\nThe coordinate is too big for plotting. Please rescale it by changing the unit.\n\n');
        end
    end
    
    % Check the y-coordinate
    [flag, message] = checkinput_isReal('y-coordinate', y_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check if the y-coordinate is too big (this causes a problem with plotting)
    if (error_flag == 0)
        if (abs(y) >= 1e5)
            error_flag    = 1;
            error_message = strcat(error_message, 'Error in the y-coordinate:\nThe coordinate is too big for plotting. Please rescale it by changing the unit.\n\n');
        end
    end
    
    % Check if there is already a node with the given coordinates
    if (error_flag == 0)
        if (numNodes > 0)
            % If there is a match, the corresponding row in temp will be [1 1].
            % Otherwise, a row will be [0 0], [0 1], or [1 0].
            temp = (ones(numNodes, 1) * [x y] == nodes);
            
            if (sum(temp(:, 1) .* temp(:, 2)) > 0)
                error_flag    = 1;
                error_message = strcat(error_message, 'Error in the node:\nA node with the given coordinates already exists.\n\n');
            end
        end
    end
    
    % Finally, check if the node lies on top of an element
    if (error_flag == 0)
        for i = 1 : numElements
            % Get the coordinates of the two nodes connecting the element
            x1 = nodes(elements(i, 1), 1);
            y1 = nodes(elements(i, 1), 2);
            x2 = nodes(elements(i, 2), 1);
            y2 = nodes(elements(i, 2), 2);
            
            % The coordinates of the given node
            x3 = x;
            y3 = y;
            
            % Check if the three points are collinear (warning: a false
            % positive is possible)
            if (abs((y2 - y1)*(x3 - x2) - (y3 - y2)*(x2 - x1)) < 1e-14)
                % Check if (x3, y3) is the middle point
                if ((min(x1, x2) <= x3 && x3 <= max(x1, x2)) && (min(y1, y2) <= y3 && y3 <= max(y1, y2)))
                    error_flag = 1;
                    error_message = strcat(error_message, 'Error in the node:\nA node cannot lie on top of an element.\n\n');
                end
            end
            
            if (error_flag == 1)
                break;
            end
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly
    %----------------------------------------------------------------------
    if (error_flag == 0)
        % Increment the number of nodes
        numNodes = numNodes + 1;
        
        % Add the node to the nodes array
        nodes(numNodes, 1) = x;
        nodes(numNodes, 2) = y;
        
        % Refresh the GUI
        drawGUI();
        
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf('Success:\nThe node has been added.'), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.20 0.60 0.30], ...
                  'ForegroundColor'    , [0.80 0.90 0.50], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    else
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf(error_message), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.80 0.90 0.50], ...
                  'ForegroundColor'    , [0.80 0.10 0.10], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_editNode(~, ~)
    global handle_panel handle_edit;
    global nodes elements;
    global numNodes numElements;
    
    
    % Get the user's inputs
    index = get(handle_edit(1), 'Value');
    x_str = get(handle_edit(2), 'String');
    y_str = get(handle_edit(3), 'String');
    x = str2double(x_str);
    y = str2double(y_str);
    
    
    % Find all nodes that are not this node
    otherNodes = find(index ~= (1 : numNodes)');
    
    numOtherNodes = numNodes - 1;
    
    % Find all elements that are not connected to this node
    if (numElements > 0)
        % Check if an element consists of the given node.
        % If so, the corresponding row in temp will be [0 1] or [1 0].
        % Otherwise, a row will be [0 0].
        temp = (index * ones(numElements, 2) == elements(:, [1 2]));
        
        otherElements = elements((sum(temp, 2) == 0), [1 2]);
        
    else
        otherElements = [];
        
    end
    
    numOtherElements = size(otherElements, 1);
    
    
    %----------------------------------------------------------------------
    %  Check the user's input
    %----------------------------------------------------------------------
    error_flag    = 0;
    error_message = '';
    
    % Check the x-coordinate
    [flag, message] = checkinput_isReal('x-coordinate', x_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check if the x-coordinate is too big (this causes a problem with plotting)
    if (error_flag == 0)
        if (abs(x) >= 1e5)
            error_flag    = 1;
            error_message = strcat(error_message, 'Error in the x-coordinate:\nThe coordinate is too big for plotting. Please rescale it by changing the unit.\n\n');
        end
    end
    
    % Check the y-coordinate
    [flag, message] = checkinput_isReal('y-coordinate', y_str);
    error_flag = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check if the y-coordinate is too big (this causes a problem with plotting)
    if (error_flag == 0)
        if (abs(y) >= 1e5)
            error_flag    = 1;
            error_message = strcat(error_message, 'Error in the y-coordinate:\nThe coordinate is too big for plotting. Please rescale it by changing the unit.\n\n');
        end
    end
    
    % Check if there is already a node with the given coordinates
    if (error_flag == 0)
        if (numOtherNodes > 0)
            temp = (ones(numOtherNodes, 1) * [x, y] == nodes(otherNodes, :));
            
            if (sum(temp(:, 1) .* temp(:, 2)) > 0)
                error_flag    = 1;
                error_message = strcat(error_message, 'Error in the node:\nA node cannot lie on top of another node.\n\n');
            end
        end
    end
    
    % Finally, check if the node lies on top of an element
    if (error_flag == 0)
        for i = 1 : numOtherElements
            % Get the coordinates of the two nodes connecting the element
            x1 = nodes(otherElements(i, 1), 1);
            y1 = nodes(otherElements(i, 1), 2);
            x2 = nodes(otherElements(i, 2), 1);
            y2 = nodes(otherElements(i, 2), 2);
            
            % The coordinates of the given node
            x3 = x;
            y3 = y;
            
            % Check if the three points are collinear (warning: a false
            % positive is possible)
            if (abs((y2 - y1)*(x3 - x2) - (y3 - y2)*(x2 - x1)) < 1e-14)
                % Check if (x3, y3) is the middle point
                if ((min(x1, x2) <= x3 && x3 <= max(x1, x2)) && (min(y1, y2) <= y3 && y3 <= max(y1, y2)))
                    error_flag    = 1;
                    error_message = strcat(error_message, 'Error in the node:\nA node cannot lie on top of an element.\n\n');
                end
            end
            
            if (error_flag == 1)
                break;
            end
        end
    end
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly
    %----------------------------------------------------------------------
    if (error_flag == 0)
        % Add the node to the nodes array
        nodes(index, 1) = x;
        nodes(index, 2) = y;
        
        % Refresh the GUI
        drawGUI();
        
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf('Success:\nThe node has been updated.'), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.20 0.60 0.30], ...
                  'ForegroundColor'    , [0.80 0.90 0.50], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    else
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf(error_message), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.80 0.90 0.50], ...
                  'ForegroundColor'    , [0.80 0.10 0.10], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_removeNode(~, ~)
    global handle_panel handle_edit;
    global nodes elements BCs;
    global numNodes numElements numBCs;
    
    
    % Get the user's inputs
    index = get(handle_edit(1), 'Value');
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly (no possibility of user input error)
    %----------------------------------------------------------------------
    % Keep the nodes that do not match the given node index
    nodes = nodes((index ~= (1 : numNodes)'), :);
    
    % Check if there are elements that need to be removed along with the
    % node
    if (numElements > 0)
        % If there are, the corresponding row in temp will be [0 1] or [1 0].
        % Otherwise, a row will be [0 0].
        temp = (index == elements(:, [1 2]));
        
        % The elements to keep correspond to the rows in temp that have
        % a column sum of 0
        elements = elements((sum(temp, 2) == 0), :);
        
        % Don't forget to reassign the nodes in the elements. Because
        % the node indices are assumed to be consecutive integers,
        % we just need to subtract the node index by 1 if it was
        % previously larger than the input index
        elements(:, [1 2]) = elements(:, [1 2]) - (elements(:, [1 2]) > index);
    end
    
    % Check if there are any BCs that need to be removed
    if (numBCs > 0)
        BCs = BCs((index ~= BCs(:, 1)), :);
        
        % Don't forget to reassign the nodes in the BCs
        BCs(:, 1) = BCs(:, 1) - (BCs(:, 1) > index);
    end
    
    % Update the number of nodes, elements, and BCs
    numNodes    = numNodes - 1;
    numElements = size(elements, 1);
    numBCs      = size(BCs, 1);
    
    
    % Refresh the GUI
    drawGUI();
    
    % If there are no more nodes that can be removed, close the prompt window
    if (numNodes == 0)
        close_prompt();
        
    else
        % Refresh the prompt window
        set(handle_edit(1), 'String', listIndices('nodes'), 'Value', min(index, numNodes));
        
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf('Success:\nThe node has been removed.'), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.20 0.60 0.30], ...
                  'ForegroundColor'    , [0.80 0.90 0.50], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_addElement(~, ~)
    global handle_panel handle_edit;
    global nodes elements;
    global numNodes numElements;
    
    % Retrieve the inputs
    index1 = get(handle_edit(1), 'Value');
    index2 = get(handle_edit(2), 'Value');
    E_str  = get(handle_edit(3), 'String');
    A_str  = get(handle_edit(4), 'String');
    
    
    %----------------------------------------------------------------------
    %  Check the user's input
    %----------------------------------------------------------------------
    error_flag    = 0;
    error_message = '';
    
    if (index1 == index2)
        error_flag    = 1;
        error_message = strcat(error_message, 'Error in the node indices:\nThe two nodes must be distinct.\n\n');
        
    elseif (numElements > 0)
        % Check if there is already an element connected by the nodes
        % index1 and index2. If so, the corresponding row in temp will
        % be [1 1]. Otherwise, a row will be [0 0], [0 1], or [1 0].
        temp1 = (ones(numElements, 1) * [index1 index2] == elements(:, [1 2]));
        temp2 = (ones(numElements, 1) * [index2 index1] == elements(:, [1 2]));
        
        if (sum(temp1(:, 1) .* temp1(:, 2)) > 0 || sum(temp2(:, 1) .* temp2(:, 2)) > 0)
            error_flag    = 1;
            error_message = strcat(error_message, 'Error in the node indices:\nAn element with the given node indices already exists.\n\n');
        end
    end
    
    % Finally, check if the element lies on top of a node
    if (error_flag == 0)
        % Get the coordinates of the two nodes
        x1 = nodes(index1, 1);
        y1 = nodes(index1, 2);
        x2 = nodes(index2, 1);
        y2 = nodes(index2, 2);
        
        for i = 1 : numNodes
            if (i ~= index1 && i ~= index2)
                % Get the coordinates of the third node
                x3 = nodes(i, 1);
                y3 = nodes(i, 2);
                
                % Check if the three points are collinear (warning: a false
                % positive is possible)
                if (abs((y2 - y1)*(x3 - x2) - (y3 - y2)*(x2 - x1)) < 1e-14)
                    % Check if (x3, y3) is the middle point
                    if ((min(x1, x2) <= x3 && x3 <= max(x1, x2)) && (min(y1, y2) <= y3 && y3 <= max(y1, y2)))
                        error_flag    = 1;
                        error_message = strcat(error_message, 'Error in the node:\nA node cannot lie on top of an element.\n\n');
                    end
                end
                
                if (error_flag == 1)
                    break;
                end
            end
        end
    end
    
    % Check the Young's modulus
    [flag, message] = checkinput_isRealPositive('Young''s modulus', E_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check the cross-sectional area
    [flag, message] = checkinput_isRealPositive('cross-sectional area', A_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly
    %----------------------------------------------------------------------
    if (error_flag == 0)
        % Increment the number of elements
        numElements = numElements + 1;
        
        % Add the node to the nodes array
        elements(numElements, 1) = index1;
        elements(numElements, 2) = index2;
        elements(numElements, 3) = str2double(E_str);
        elements(numElements, 4) = str2double(A_str);
        
        % Refresh the GUI
        drawGUI();
        
        % If there are no more elements that can be added, close the prompt
        % window
        if (numElements == nchoosek(numNodes, 2))
            close_prompt();
            
        else
            % Display feedback
            uicontrol('Parent'             , handle_panel, ...
                      'Style'              , 'text', ...
                      'String'             , sprintf('Success:\nThe element has been added.'), ...
                      'FontUnits'          , 'normalized', ...
                      'Units'              , 'normalized', ...
                      'Position'           , [0.03 0.10 0.94 0.12], ...
                      'BackgroundColor'    , [0.20 0.60 0.30], ...
                      'ForegroundColor'    , [0.80 0.90 0.50], ...
                      'FontSize'           , 0.250, ...
                      'HorizontalAlignment', 'left');
            
        end
        
    else
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf(error_message), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.80 0.90 0.50], ...
                  'ForegroundColor'    , [0.80 0.10 0.10], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_removeElement(~, ~)
    global handle_panel handle_edit;
    global elements;
    global numElements;
    
    
    % Get the user's inputs
    index = get(handle_edit(1), 'Value');
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly (no possibility of user input error)
    %----------------------------------------------------------------------
    % Keep the nodes that do not match the given element index
    elements = elements((index ~= (1 : numElements)'), :);
    
    % Update the number of elements
    numElements = numElements - 1;
    
    
    % Refresh the GUI
    drawGUI();
    
    % If there are no more elements that can be removed, close the prompt
    % window
    if (numElements == 0)
        close_prompt();
        
    else
        % Refresh the prompt window
        set(handle_edit(1), 'String', listIndices('elements'), 'Value', min(index, numElements));
        
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf('Success:\nThe element has been removed.'), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.20 0.60 0.30], ...
                  'ForegroundColor'    , [0.80 0.90 0.50], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_addBC(~, ~)
    global handle_panel handle_edit;
    global BCs;
    global numNodes numBCs;
    
    
    % Find the nodes without a BC specified
    nodesWithoutBCs = get(handle_edit(1), 'String');
    
    % Get the user's inputs
    index  = str2double(nodesWithoutBCs{get(handle_edit(1), 'Value')});
    BCtype = get(handle_edit(2), 'Value');
    x_str  = get(handle_edit(3), 'String');
    y_str  = get(handle_edit(4), 'String');
    x = str2double(x_str);
    y = str2double(y_str);
    
    
    %----------------------------------------------------------------------
    %  Check the user's input
    %----------------------------------------------------------------------
    error_flag    = 0;
    error_message = '';
    
    % Check the x-component value
    [flag, message] = checkinput_isReal('x-component value', x_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    % Check the y-component value
    [flag, message] = checkinput_isReal('y-component value', y_str);
    error_flag    = max(error_flag, flag);
    error_message = strcat(error_message, message);
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly
    %----------------------------------------------------------------------
    if (error_flag == 0)
        % Increment the number of BCs
        numBCs = numBCs + 1;
        
        % Add the node to the nodes array
        BCs(numBCs, 1) = index;
        BCs(numBCs, 2) = BCtype;
        BCs(numBCs, 3) = x;
        BCs(numBCs, 4) = y;
        
        % Sort the BCs in ascending node index
        if (numBCs > 1)
            [~, permutation] = sort(BCs(:, 1));
            BCs = BCs(permutation, :);
        end
        
        
        % Refresh the GUI
        drawGUI();
        
        % If there are no more boundary conditions that can be added, close
        % the prompt window
        if (numBCs == numNodes)
            close_prompt();
            
        else
            % Refresh the prompt window
            set(handle_edit(1), 'String', listIndices('nodesWithoutBCs'), 'Value', 1);
            
            % Display feedback
            uicontrol('Parent'             , handle_panel, ...
                      'Style'              , 'text', ...
                      'String'             , sprintf('Success:\nThe boundary condition has been added to the node.'), ...
                      'FontUnits'          , 'normalized', ...
                      'Units'              , 'normalized', ...
                      'Position'           , [0.03 0.10 0.94 0.12], ...
                      'BackgroundColor'    , [0.20 0.60 0.30], ...
                      'ForegroundColor'    , [0.80 0.90 0.50], ...
                      'FontSize'           , 0.250, ...
                      'HorizontalAlignment', 'left');
            
        end
        
    else
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf(error_message), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.80 0.90 0.50], ...
                  'ForegroundColor'    , [0.80 0.10 0.10], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function ok_removeBC(~, ~)
    global handle_panel handle_edit;
    global BCs;
    global numBCs;
    
    % Find the nodes without a BC specified
    nodesWithBCs = get(handle_edit(1), 'String');
    
    % Find the row that corresponds to the node to be removed
    index = find(str2double(nodesWithBCs{get(handle_edit(1), 'Value')}) == BCs(:, 1));
    
    
    %----------------------------------------------------------------------
    %  Respond accordingly (no possibility of user input error)
    %----------------------------------------------------------------------
    % Keep the boundary conditions for all the other nodes
    BCs = BCs((index ~= (1 : numBCs)'), :);
    
    % Update the number of BCs
    numBCs = numBCs - 1;
    
    
    % Refresh the GUI
    drawGUI();
    
    % If there are no more elements, close the prompt window
    if (numBCs == 0)
        close_prompt();
        
    else
        % Refresh the prompt window
        set(handle_edit(1), 'String', listIndices('nodesWithBCs'), 'Value', 1);
        
        % Display feedback
        uicontrol('Parent'             , handle_panel, ...
                  'Style'              , 'text', ...
                  'String'             , sprintf('Success:\nThe boundary condition at the node has been removed.'), ...
                  'FontUnits'          , 'normalized', ...
                  'Units'              , 'normalized', ...
                  'Position'           , [0.03 0.10 0.94 0.12], ...
                  'BackgroundColor'    , [0.20 0.60 0.30], ...
                  'ForegroundColor'    , [0.80 0.90 0.50], ...
                  'FontSize'           , 0.250, ...
                  'HorizontalAlignment', 'left');
        
    end
end


function [flag, message] = checkinput_isReal(name, value_str)
    % Convert the input from string to a number
    value = str2double(value_str);
    
    % Assume that there is an error
    flag    = 1;
    message = ['Error in the ', name, ':\n'];
    
    % Check these criteria
    if (isempty(value_str))
        message = [message, 'Please enter the ', name, '.\n\n'];
        
    elseif (isempty(value))
        message = [message, 'The input must be a real number.\n\n'];
        
    elseif (~isscalar(value))
        message = [message, 'The input must be a scalar, and cannot be a vector or a matrix.\n\n'];
        
    elseif (~isreal(value) || isinf(value) || isnan(value))
        message = [message, 'The input must be a real number.\n\n'];
        
    else
        flag    = 0;
        message = '';
        
    end
end


function [flag, message] = checkinput_isRealPositive(name, value_str)
    % Convert the input from string to a number
    value = str2double(value_str);
    
    % Assume that there is an error
    flag    = 1;
    message = ['Error in the ', name, ':\n'];
    
    % Check these criteria
    if (isempty(value_str))
        message = [message, 'Please enter the ', name, '.\n\n'];
        
    elseif (isempty(value))
        message = [message, 'The input must be a real number.\n\n'];
        
    elseif (~isscalar(value))
        message = [message, 'The input must be a scalar, and cannot be a vector or a matrix.\n\n'];
        
    elseif (~isreal(value) || value <= 0 || isinf(value) || isnan(value))
        message = [message, 'The input must be a positive number.\n\n'];
        
    else
        flag    = 0;
        message = '';
        
    end
end


function display_success_message(message)
    global handle_prompt
    
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    handle_prompt = ...
    figure('Name'        , 'Success', ...
           'Units'       , 'normalized', ...
           'Position'    , [0.00 0.00 0.26 0.15], ...
           'Color'       , [0.76 0.82 0.73], ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    movegui(handle_prompt, 'center');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'text', ...
              'String'             , message, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.06 0.20 0.88 0.64], ...
              'BackgroundColor'    , [0.76 0.82 0.73], ...
              'ForegroundColor'    , [0.14 0.12 0.20], ...
              'FontSize'           , 0.170, ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'OK', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.43 0.06 0.14 0.20], ...
              'FontSize'           , 0.570, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


function display_error_message(message)
    global handle_prompt
    
    % If there is a prompt window already, close it
    if (ishandle(handle_prompt))
        close_prompt();
    end
    
    handle_prompt = ...
    figure('Name'        , 'Error', ...
           'Units'       , 'normalized', ...
           'Position'    , [0.00 0.00 0.26 0.15], ...
           'Color'       , [0.80 0.90 0.50], ...
           'DockControls', 'off', ...
           'MenuBar'     , 'none', ...
           'NumberTitle' , 'off', ...
           'Resize'      , 'off', ...
           'ToolBar'     , 'none');
    
    movegui(handle_prompt, 'center');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'text', ...
              'String'             , message, ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.06 0.20 0.88 0.64], ...
              'BackgroundColor'    , [0.80 0.90 0.50], ...
              'ForegroundColor'    , [0.80 0.10 0.10], ...
              'FontSize'           , 0.170, ...
              'HorizontalAlignment', 'left');
    
    uicontrol('Parent'             , handle_prompt, ...
              'Style'              , 'pushbutton', ...
              'String'             , 'OK', ...
              'FontUnits'          , 'normalized', ...
              'Units'              , 'normalized', ...
              'Position'           , [0.43 0.06 0.14 0.20], ...
              'FontSize'           , 0.570, ...
              'FontWeight'         , 'bold', ...
              'Callback'           , @close_prompt);
end


%--------------------------------------------------------------------------
%  This routine allows us to change the color of the input boxes depending
%  on whether a box has been selected (is in focus).
%--------------------------------------------------------------------------
function changeColor(source, ~)
    global handle_edit;
    
    numHandles = size(handle_edit, 2);
    
    % Highlight the input box if selected
    index = find(source == handle_edit);
    set(handle_edit(index), 'BackgroundColor', [0.80 0.90 0.50], 'Enable', 'on');
    
    for i = 1 : numHandles
        % Un-highlight all the other input boxes
        if (i ~= index)
            set(handle_edit(i), 'BackgroundColor', [0.90 0.92 0.95], 'Enable', 'off');
        end
    end
    
    % Set the focus to the object
    uicontrol(source);
end


%--------------------------------------------------------------------------
%  Close the prompt window
%--------------------------------------------------------------------------
function close_prompt(~, ~)
    global handle_prompt handle_panel handle_edit;
    
    close(handle_prompt);
    
    handle_prompt = [];
    handle_panel  = [];
    handle_edit   = [];
end